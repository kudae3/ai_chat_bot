generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activities {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  activatable_type String    @db.VarChar(255)
  activatable_id   BigInt    @db.UnsignedBigInt
  user_id          BigInt    @db.UnsignedBigInt
  status           String    @db.Text
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)

  @@index([activatable_type, activatable_id], map: "activities_activatable_type_activatable_id_index")
}

model best_replies {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  root_id    Int       @unique(map: "best_replies_root_id_unique")
  user_id    Int
  comment_id Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model bookmarks {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  bookmarkable_type String    @db.VarChar(255)
  bookmarkable_id   BigInt    @db.UnsignedBigInt
  user_id           BigInt    @db.UnsignedBigInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)

  @@index([bookmarkable_type, bookmarkable_id], map: "bookmarks_bookmarkable_type_bookmarkable_id_index")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model categories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String?   @unique(map: "categories_name_unique") @db.VarChar(255)
  color      String?   @unique(map: "categories_color_unique") @db.VarChar(255)
  slug       String?   @unique(map: "categories_slug_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model certificates {
  id            BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  course_id     BigInt?             @db.UnsignedBigInt
  course_name   String?             @db.VarChar(255)
  profile       String?             @db.VarChar(255)
  user_id       BigInt?             @db.UnsignedBigInt
  email         String?             @db.VarChar(255)
  name          String?             @db.VarChar(255)
  link          String?             @db.VarChar(255)
  github_repo   String?             @db.VarChar(255)
  status        certificates_status @default(pending)
  is_approved   String              @default("0") @db.VarChar(255)
  approval_date DateTime?           @db.Timestamp(0)
  reject_reason String?             @db.LongText
  created_at    DateTime?           @db.Timestamp(0)
  updated_at    DateTime?           @db.Timestamp(0)

  @@unique([course_id, user_id], map: "certificates_course_id_user_id_unique")
}

model chapters {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  number     Int       @db.UnsignedInt
  course_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  slug       String?   @unique(map: "chapters_slug_unique") @db.VarChar(255)
}

model comment_users {
  user_id    BigInt    @db.UnsignedBigInt
  comment_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@id([user_id, comment_id])
}

model comments {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  body             String    @db.Text
  link             String?   @db.Text
  user_id          BigInt?   @db.UnsignedBigInt
  base_id          BigInt?   @db.UnsignedBigInt
  parent_id        BigInt?   @db.UnsignedBigInt
  is_best_reply    Boolean   @default(false)
  is_show_reply    Boolean   @default(true)
  best_reply_user  Json?
  commentable_type String?   @db.VarChar(255)
  commentable_id   BigInt?   @db.UnsignedBigInt
  pinned           Boolean   @default(false)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)

  @@index([base_id], map: "comments_base_id_index")
  @@index([commentable_id], map: "comments_commentable_id_index")
  @@index([commentable_type], map: "comments_commentable_type_index")
  @@index([parent_id], map: "comments_parent_id_index")
  @@index([user_id], map: "comments_user_id_index")
}

model country_prices {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id         BigInt    @db.UnsignedBigInt
  country_code      String    @db.VarChar(255)
  currency_code     String    @db.VarChar(255)
  price             Decimal   @db.Decimal(10, 2)
  discountFees      String?   @db.VarChar(255)
  startDiscountDate String?   @db.VarChar(255)
  dueDiscountDate   String?   @db.VarChar(255)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  courses           courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "country_prices_course_id_foreign")

  @@index([course_id], map: "country_prices_course_id_foreign")
}

model course_prerequisite {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id       BigInt    @db.UnsignedBigInt
  prerequisite_id BigInt    @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@unique([course_id, prerequisite_id], map: "course_prerequisite_course_id_prerequisite_id_unique")
}

model course_tag {
  course_id  BigInt    @db.UnsignedBigInt
  tag_id     BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@id([course_id, tag_id])
}

model course_user {
  user_id    BigInt    @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  can_access Boolean   @default(true)

  @@id([user_id, course_id])
}

model courses {
  id                BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  name              String?          @db.VarChar(255)
  user_id           BigInt           @db.UnsignedBigInt
  slug              String?          @db.VarChar(255)
  photo             String?          @db.VarChar(255)
  description       String?          @db.Text
  course_guarantee  String?          @db.Text
  fees              String?          @db.VarChar(255)
  default_currency  String           @default("USD") @db.VarChar(3)
  discountFees      String?          @db.VarChar(255)
  duration          Int              @default(1)
  startDiscountDate String?          @db.VarChar(255)
  dueDiscountDate   String?          @db.VarChar(255)
  suggest_courses   Json?            @default(dbgenerated("(json_array())"))
  created_at        DateTime?        @db.Timestamp(0)
  updated_at        DateTime?        @db.Timestamp(0)
  status            courses_status   @default(Ongoing)
  courselevel       String?          @default("Beginner") @db.VarChar(255)
  icon              String?          @db.VarChar(255)
  country_prices    country_prices[]
  projects          projects[]
}

model donations {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id           String?   @db.VarChar(255)
  facebook_name     String?   @db.VarChar(255)
  receipt_image_url String?   @db.VarChar(255)
  amount            String?   @db.VarChar(255)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  deleted_at        DateTime? @db.Timestamp(0)
}

model email_replies {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email_id     BigInt    @db.UnsignedBigInt
  body         String    @db.LongText
  attach_files Json?
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  emails       emails    @relation(fields: [email_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "email_replies_email_id_foreign")

  @@index([email_id], map: "email_replies_email_id_foreign")
}

model emails {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  subject       String          @db.VarChar(255)
  body          String          @db.LongText
  sender        String          @db.VarChar(255)
  recipient     String          @db.VarChar(255)
  attach_files  Json?
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  email_replies email_replies[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model faqs {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  question   String    @db.VarChar(255)
  answer     String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model favorables {
  user_id        BigInt    @db.UnsignedBigInt
  favorable_id   BigInt    @db.UnsignedBigInt
  favorable_type String    @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@id([user_id, favorable_id, favorable_type])
}

model feedback {
  id           BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  class_type   feedback_class_type
  rating       Int                 @db.UnsignedTinyInt
  likes        String?             @db.Text
  dislikes     String?             @db.Text
  improvements String?             @db.Text
  created_at   DateTime?           @db.Timestamp(0)
  updated_at   DateTime?           @db.Timestamp(0)
}

model finances {
  id           BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  title        String                @db.VarChar(255)
  description  String?               @db.LongText
  amount       Int
  finance_type finances_finance_type @default(Income)
  created_at   DateTime?             @db.Timestamp(0)
  updated_at   DateTime?             @db.Timestamp(0)
}

model handle_failed_jobs {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid         String    @unique(map: "handle_failed_jobs_uuid_unique") @db.VarChar(255)
  display_name String    @db.VarChar(255)
  status_code  String    @db.VarChar(255)
  message      String    @db.LongText
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model issues {
  id          BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user        String?           @db.VarChar(255)
  issue_type  issues_issue_type
  description String            @db.Text
  photo       String?           @db.VarChar(255)
  status      issues_status     @default(backlog)
  created_at  DateTime?         @db.Timestamp(0)
  updated_at  DateTime?         @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model lessons {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title              String    @db.VarChar(255)
  description        String    @db.Text
  number             Int       @db.UnsignedInt
  video              String    @db.VarChar(255)
  source_code_url    String?   @db.VarChar(255)
  video_source_links Json?
  video_length       String?   @db.VarChar(255)
  unlock_lesson      Boolean   @default(false)
  course_id          BigInt    @db.UnsignedBigInt
  chapter_id         BigInt    @db.UnsignedBigInt
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  slug               String?   @unique(map: "lessons_slug_unique") @db.VarChar(255)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model notifications {
  id              String    @id @db.Char(36)
  type            String    @db.VarChar(255)
  notifiable_type String    @db.VarChar(255)
  notifiable_id   BigInt    @db.UnsignedBigInt
  data            String    @db.Text
  seen_at         DateTime? @db.Timestamp(0)
  read_at         DateTime? @db.Timestamp(0)
  deleted_at      DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_type, notifiable_id], map: "notifications_notifiable_type_notifiable_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_reset_tokens {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model personal_reminders {
  id          BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt                    @db.UnsignedBigInt
  title       String                    @db.VarChar(255)
  description String                    @db.Text
  status      personal_reminders_status @default(Pending)
  created_at  DateTime?                 @db.Timestamp(0)
  updated_at  DateTime?                 @db.Timestamp(0)
}

model posts {
  id            BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title         String     @db.VarChar(255)
  slug          String     @unique(map: "posts_slug_unique") @db.VarChar(255)
  reading_time  Int        @default(5)
  category_id   BigInt?    @db.UnsignedBigInt
  user_id       BigInt?    @db.UnsignedBigInt
  photo         String     @db.VarChar(255)
  body          String     @db.Text
  type          posts_type
  schedule_date String?    @db.VarChar(255)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
}

model projects {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id   BigInt?   @db.UnsignedBigInt
  title       String?   @db.VarChar(255)
  description String?   @db.LongText
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  courses     courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "projects_course_id_foreign")

  @@index([course_id], map: "projects_course_id_foreign")
}

model pulse_aggregates {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  bucket    Int     @db.UnsignedInt
  period    Int     @db.UnsignedMediumInt
  type      String  @db.VarChar(255)
  key       String  @db.MediumText
  key_hash  Bytes?  @db.Binary(16)
  aggregate String  @db.VarChar(255)
  value     Decimal @db.Decimal(20, 2)
  count     Int?    @db.UnsignedInt

  @@unique([bucket, period, type, aggregate, key_hash], map: "pulse_aggregates_bucket_period_type_aggregate_key_hash_unique")
  @@index([period, bucket], map: "pulse_aggregates_period_bucket_index")
  @@index([period, type, aggregate, bucket], map: "pulse_aggregates_period_type_aggregate_bucket_index")
  @@index([type], map: "pulse_aggregates_type_index")
}

model pulse_entries {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  timestamp Int     @db.UnsignedInt
  type      String  @db.VarChar(255)
  key       String  @db.MediumText
  key_hash  Bytes?  @db.Binary(16)
  value     BigInt?

  @@index([key_hash], map: "pulse_entries_key_hash_index")
  @@index([timestamp], map: "pulse_entries_timestamp_index")
  @@index([timestamp, type, key_hash, value], map: "pulse_entries_timestamp_type_key_hash_value_index")
  @@index([type], map: "pulse_entries_type_index")
}

model pulse_values {
  id        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  timestamp Int    @db.UnsignedInt
  type      String @db.VarChar(255)
  key       String @db.MediumText
  key_hash  Bytes? @db.Binary(16)
  value     String @db.MediumText

  @@unique([type, key_hash], map: "pulse_values_type_key_hash_unique")
  @@index([timestamp], map: "pulse_values_timestamp_index")
  @@index([type], map: "pulse_values_type_index")
}

model redeem_codes {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  code            String            @unique(map: "redeem_codes_code_unique") @db.VarChar(255)
  type            redeem_codes_type
  discount_amount Int
  expires_at      DateTime?         @db.DateTime(0)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
}

model reviews {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt?   @db.UnsignedBigInt
  course_id      BigInt?   @db.UnsignedBigInt
  body           String?   @db.Text
  student_image  String?   @db.VarChar(255)
  student_name   String?   @db.VarChar(255)
  student_job    String?   @db.VarChar(255)
  student_github String?   @db.VarChar(255)
  is_published   Boolean   @default(false)
  custom_message String?   @db.Text
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
}

model roles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @unique(map: "roles_name_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model settings {
  id                        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  auto_play                 Boolean   @default(true)
  lock_profile              Boolean   @default(false)
  default_theme             Boolean   @default(true)
  skip_video                Boolean   @default(true)
  picture_in_picture        Boolean   @default(true)
  locale                    String    @default("en") @db.VarChar(255)
  video_pause_on_tab_change Boolean   @default(true)
  user_id                   BigInt    @unique(map: "settings_user_id_unique") @db.UnsignedBigInt
  created_at                DateTime? @db.Timestamp(0)
  updated_at                DateTime? @db.Timestamp(0)
}

model subscribers {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @unique(map: "subscribers_email_unique") @db.VarChar(255)
  user_id    BigInt?   @unique(map: "subscribers_user_id_unique") @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model subscription_items {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  subscription_id BigInt    @db.UnsignedBigInt
  stripe_id       String    @unique(map: "subscription_items_stripe_id_unique") @db.VarChar(255)
  stripe_product  String    @db.VarChar(255)
  stripe_price    String    @db.VarChar(255)
  quantity        Int?
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([subscription_id, stripe_price], map: "subscription_items_subscription_id_stripe_price_index")
}

model subscriptions {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  type          String    @db.VarChar(255)
  stripe_id     String    @unique(map: "subscriptions_stripe_id_unique") @db.VarChar(255)
  stripe_status String    @db.VarChar(255)
  stripe_price  String?   @db.VarChar(255)
  quantity      Int?
  trial_ends_at DateTime? @db.Timestamp(0)
  ends_at       DateTime? @db.Timestamp(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)

  @@index([user_id, stripe_status], map: "subscriptions_user_id_stripe_status_index")
}

model tags {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String?   @unique(map: "tags_name_unique") @db.VarChar(255)
  slug       String?   @unique(map: "tags_slug_unique") @db.VarChar(255)
  color      String?   @unique(map: "tags_color_unique") @db.VarChar(255)
  image      String?   @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model total_incomes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  income     Float
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model transactions {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt?   @db.UnsignedBigInt
  course_id           BigInt?   @db.UnsignedBigInt
  note                String?   @db.Text
  payment_remind_date String?   @db.VarChar(255)
  paid_amount         String?   @db.VarChar(255)
  currency            String    @default("MMK") @db.VarChar(255)
  discount            Int?
  left_amount         String?   @db.VarChar(255)
  fees_on_attend      String?   @db.VarChar(255)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  deleted_at          DateTime? @db.Timestamp(0)
  isBundleTransaction Boolean   @default(false)
}

model user_video_records {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  lesson_id  BigInt    @db.UnsignedBigInt
  records    String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  role_id            BigInt?   @db.UnsignedBigInt
  name               String?   @db.VarChar(255)
  username           String?   @unique(map: "users_username_unique") @db.VarChar(255)
  email              String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at  DateTime? @db.Timestamp(0)
  country_code       String    @default("+95") @db.VarChar(255)
  phone              String?   @db.VarChar(255)
  bio                String?   @db.Text
  password           String    @db.VarChar(255)
  session_token      String?   @unique(map: "users_session_token_unique") @db.VarChar(255)
  profile            String?   @db.LongText
  github_url         String?   @db.VarChar(255)
  instagram_url      String?   @db.VarChar(255)
  facebook_url       String?   @db.VarChar(255)
  portfolio_url      String?   @db.VarChar(255)
  job                String?   @db.VarChar(255)
  is_active_now      String?   @default("0") @db.VarChar(255)
  date_of_birth      DateTime? @db.Timestamp(0)
  unlimited_download Boolean   @default(false)
  last_login         DateTime? @db.Timestamp(0)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  deleted_at         DateTime? @db.Timestamp(0)
  stripe_id          String?   @db.VarChar(255)
  pm_type            String?   @db.VarChar(255)
  pm_last_four       String?   @db.VarChar(4)
  trial_ends_at      DateTime? @db.Timestamp(0)

  @@index([stripe_id], map: "users_stripe_id_index")
}

model watched_lessons {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  lesson_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@unique([user_id, lesson_id], map: "watched_lessons_user_id_lesson_id_unique")
}

enum feedback_class_type {
  Zoom
  In_class @map("In class")
  Website
}

enum issues_issue_type {
  Content_Error     @map("Content Error")
  Technical_Problem @map("Technical Problem")
  Payment_Issue     @map("Payment Issue")
  UI_UX_Issue       @map("UI/UX Issue")
  Other
}

enum redeem_codes_type {
  fixed
  percentage
}

enum finances_finance_type {
  Income
  Expense
}

enum personal_reminders_status {
  Pending
  Completed
}

enum issues_status {
  backlog
  working
  complete
}

enum posts_type {
  blog
  trick
}

enum certificates_status {
  pending
  review
  result
}

enum courses_status {
  Completed
  Ongoing
  Dropped
}
